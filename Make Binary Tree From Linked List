/*class Tree{
int data;
    Tree left;
    Tree right;
    Tree(int d){
        data=d;
        left=null;
        right=null;
    }
}

class Node {
    int data;
    Node next;
    Node(int d) {
        data = d;
        next = null;
    }
}*/


class GfG 
{
    //Function to make binary tree from linked list.
    public static Tree convert(Node head, Tree node) {
        // add code here.}
        if (head == null) return null;

        // Create the root of the tree
        node = new Tree(head.data);
        head = head.next;

        // Use a queue to do level order traversal
        Queue<Tree> queue = new LinkedList<>();
        queue.add(node);

        // Iterate through the linked list and create the binary tree nodes
        while (head != null) {
            // Remove the front node from the queue
            Tree current = queue.poll();

            // Create the left child from the next node in the linked list
            if (head != null) {
                current.left = new Tree(head.data);
                queue.add(current.left);
                head = head.next;
            }

            // Create the right child from the next node in the linked list
            if (head != null) {
                current.right = new Tree(head.data);
                queue.add(current.right);
                head = head.next;
            }
        }

        return node;
    }
}
