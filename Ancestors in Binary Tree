class Solution {

    public ArrayList<Integer> Ancestors(Node root, int target) {
        // add your code here
        ArrayList<Integer> ancestors = new ArrayList<>();
        boolean found = findAncestors(root, target, ancestors);
        if (!found) {
            ancestors.clear(); // Clear list if target is not found
        }
        return ancestors;
    }

    // Helper function to perform DFS and find ancestors
    private boolean findAncestors(Node node, int target, ArrayList<Integer> ancestors) {
        if (node == null) {
            return false;
        }

        // If the current node is the target, return true
        if (node.data == target) {
            return true;
        }

        // Recursively check in left subtree
        if (findAncestors(node.left, target, ancestors) || findAncestors(node.right, target, ancestors)) {
            // If found in either subtree, add current node to ancestors list
            ancestors.add(node.data);
            return true;
        }

        // If not found in either subtree, return false
        return false;
    }
}
