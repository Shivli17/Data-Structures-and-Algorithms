class Solution {
    static int threeSumClosest(int[] array, int target) {
        // code here
        Arrays.sort(array);  // Step 1: Sort the array
        int n = array.length;
        int closestSum = Integer.MIN_VALUE;  // To store the closest sum

        for (int i = 0; i < n - 2; i++) {  // Step 2: Iterate through each element
            int left = i + 1;  // Initializing the left pointer
            int right = n - 1;  // Initializing the right pointer

            while (left < right) {  // Step 3: Use two pointers to find the closest sum
                int sum = array[i] + array[left] + array[right];

                // Update the closest sum if found a better one
                if (Math.abs(sum - target) < Math.abs(closestSum - target) || 
                    (Math.abs(sum - target) == Math.abs(closestSum - target) && sum > closestSum)) {
                    closestSum = sum;
                }

                // Adjust the pointers based on the sum comparison with the target
                if (sum < target) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        
        return closestSum;
    }
}
